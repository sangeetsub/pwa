{"version":3,"sources":["components/Dashboard.jsx","components/Navigation.jsx","App.js","App2.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","root","formControl","margin","button","flexGrow","menuButton","marginRight","title","App","useStyles","width","classes","useState","weight","setWeight","height","setHeight","age","setAge","gender","setGender","myBmr","setBmr","className","noValidate","autoComplete","TextField","id","type","label","variant","value","onChange","e","target","FormControl","component","RadioGroup","row","aria-label","name","FormControlLabel","control","Radio","Button","onClick","toFixed","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","App2","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.799feec4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  root: {\n    formControl: {\n      margin: theme.spacing(3),\n    },\n    button: {\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n    flexGrow: 1,\n  },\n}));\n\nexport default function CenteredGrid() {\n  const classes = useStyles();\n\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"male\");\n  const [myBmr, setBmr] = useState(0);\n\n  const handleSubmit = () => {\n    let bmr = 0;\n    if (gender === \"male\") {\n      bmr = 66 + 6.2 * weight + 12.7 * height - 6.76 * age;\n      setBmr(bmr.toFixed(2));\n    } else {\n      bmr = 655.1 + 4.35 * weight + 4.7 * height - 4.7 * age;\n      setBmr(bmr.toFixed(2));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1} justify=\"center\">\n        <Grid item xs={11} sm={8}>\n          <h2>\n            Please enter your info down below to calculate your calories lost\n            per day.\n          </h2>\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <TextField\n            fullWidth\n            id=\"weight\"\n            type=\"Number\"\n            label=\"Weight (lbs)\"\n            variant=\"outlined\"\n            value={weight}\n            onChange={(e) => setWeight(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <TextField\n            fullWidth\n            id=\"height\"\n            type=\"Number\"\n            label=\"Height (inches)\"\n            variant=\"outlined\"\n            value={height}\n            onChange={(e) => setHeight(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <TextField\n            fullWidth\n            id=\"age\"\n            type=\"Number\"\n            label=\"Age\"\n            variant=\"outlined\"\n            value={age}\n            onChange={(e) => setAge(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <RadioGroup\n            row\n            aria-label=\"gender\"\n            name=\"gender1\"\n            value={gender}\n            onChange={(e) => setGender(e.target.value)}\n            className=\"Center\"\n          >\n            <FormControlLabel\n              value=\"female\"\n              control={<Radio />}\n              label=\"Female\"\n            />\n            <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n          </RadioGroup>\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={handleSubmit}\n          >\n            Calculate\n          </Button>\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <Button\n            onClick={() => {\n              setAge(\"\");\n              setGender(\"male\");\n              setHeight(\"\");\n              setWeight(\"\");\n              setBmr(0);\n            }}\n            color=\"secondary\"\n          >\n            Clear\n          </Button>\n        </Grid>\n        <Grid item xs={11} sm={7}>\n          <h2>{`You've lost : ${myBmr} calories today.`}</h2>\n          <p>&copy; Sangeet Subedi, 2020</p>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction MenuAppBar() {\n  const classes = useStyles();\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleChange = (event) => {\n    setAuth(event.target.checked);\n  };\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Calclories\n          </Typography>\n          {auth && (\n            <div>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                <MenuItem onClick={handleClose}>My account</MenuItem>\n              </Menu>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default MenuAppBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./components/Dashboard\";\nimport MenuAppBar from \"./components/Navigation\";\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  makeStyles,\n} from \"@material-ui/core/styles\";\n\nfunction App() {\n  // const theme = createMuiTheme({\n  //   palette: {\n  //     primary: {\n  //       main: \"#00838f\",\n  //       light: \"#4fb3bf\",\n  //       dark: \"#005662\",\n  //     },\n  //     secondary: {\n  //       main: \"#26c6da\",\n  //       light: \"#6ff9ff\",\n  //       dark: \"#0095a8\",\n  //     },\n  //   },\n  // });\n  return (\n    <div>\n      {/* <div>\n        <MenuAppBar />\n      </div> */}\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport CopyrightIcon from \"@material-ui/icons/Copyright\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"35ch\",\n    },\n    formControl: {\n      margin: theme.spacing(3),\n    },\n    button: {\n      margin: theme.spacing(1, 0, 1, 0),\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [gender, setGender] = useState(\"male\");\n  const [myBmr, setBmr] = useState(0);\n\n  const handleSubmit = () => {\n    let bmr = 0;\n    if (gender === \"male\") {\n      bmr = 66 + 6.2 * weight + 12.7 * height - 6.76 * age;\n      setBmr(bmr.toFixed(2));\n    } else {\n      bmr = 655.1 + 4.35 * weight + 4.7 * height - 4.7 * age;\n      setBmr(bmr.toFixed(2));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>\n        Please enter your info down below to calculate your calories lost per\n        day.\n      </h2>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <TextField\n          id=\"weight\"\n          type=\"Number\"\n          label=\"Weight (lbs)\"\n          variant=\"outlined\"\n          value={weight}\n          onChange={(e) => setWeight(e.target.value)}\n        />\n        <TextField\n          id=\"height\"\n          type=\"Number\"\n          label=\"Height (inches)\"\n          variant=\"outlined\"\n          value={height}\n          onChange={(e) => setHeight(e.target.value)}\n        />\n        <TextField\n          id=\"age\"\n          type=\"Number\"\n          label=\"Age\"\n          variant=\"outlined\"\n          value={age}\n          onChange={(e) => setAge(e.target.value)}\n        />\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            row\n            aria-label=\"gender\"\n            name=\"gender1\"\n            value={gender}\n            onChange={(e) => setGender(e.target.value)}\n          >\n            <FormControlLabel\n              value=\"female\"\n              control={<Radio />}\n              label=\"Female\"\n            />\n            <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n          </RadioGroup>\n        </FormControl>\n\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n          onClick={handleSubmit}\n        >\n          Calculate\n        </Button>\n        <Button\n          onClick={() => {\n            setAge(\"\");\n            setGender(\"male\");\n            setHeight(\"\");\n            setWeight(\"\");\n            setBmr(0);\n          }}\n          color=\"secondary\"\n        >\n          Clear\n        </Button>\n      </form>\n      <h2>{`Your BMR is : ${myBmr}`}</h2>\n      <p>&copy; Sangeet Subedi, 2020</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport App2 from \"./App2\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}